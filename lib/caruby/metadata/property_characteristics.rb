require 'jinx/metadata/property_characteristics'

module CaRuby
  # The CaRuby::PropertyCharacteristics mixin captures persistence metadata.
  module PropertyCharacteristics
    # The supported persistence-specific property qualifier flags. This set augments the
    # +Jinx::Property::SUPPORTED_FLAGS+ set for persistence adapters. See the complementary
    # methods for an explanation of the flag option, e.g. {#autogenerated?} for the
    # +:autogenerated+ flag.
    SUPPORTED_FLAGS = [
      :autogenerated, :logical, :cascaded, :no_cascade_update_to_create, :saved, :unsaved, :fetched,
      :unfetched, :transient, :include_in_save_template, :fetch_saved, :create_only, :update_only,
      :nosync, :volatile].to_set

    # Returns whether this property is fetched, determined as follows:
    # * this property is marked with the +:fetched+ flag
    # * this property is not marked with the +:transient+ or +:unfetched+ flag
    # * otherwise, this is a non-domain property
    # * otherwise, this is a domain property and one of the following conditions hold:
    #   * this is a non-logical dependent domain property
    #   * this is an owner property
    #   * this is an abstract, non-derived independent property
    #
    # @return [Boolean] whether this property is fetched
    def fetched?
      return true if @flags.include?(:fetched)
      return false if @flags.include?(:transient) or @flags.include?(:unfetched)
      nondomain? or dependent? ? fetched_dependent? : fetched_independent?
    end
    
    # Returns whether this property is unfetched, unsaved and should not be
    # lazy-loaded, determined by whether it is marked with the +:transient+ flag.
    #
    # @return [Boolean] whether this property is transient
    def transient?
      @flags.include?(:transient)
    end
    
    # Returns whether this property is a dependent whose value is automatically generated
    # with place-holder domain objects when the parent is created. An attribute is auto-generated
    # if the +:autogenerated+ flag is set.
    #
    # @return [Boolean] whether this property is auto-generated
    def autogenerated?
      @flags.include?(:autogenerated)
    end
    
    # Returns whether this attribute must be fetched when a declarer instance is saved.
    # An attribute is a saved fetch attribute if any of the following conditions hold:
    # * it is {#autogenerated?}
    # * it is {#cascaded?} and marked with the +:unfetched+ flag
    # * it is marked with the +:fetch_saved+ flag
    #
    # @return [Boolean] whether this property must be refetched in order to reflect
    #   the database content
    def fetch_saved?
       @flags.include?(:fetch_saved) or autogenerated? or (cascaded? and @flags.include?(:unfetched))
    end

    # Returns whether this property is either:
    # 1. an owner attribute which does not automatically cascade application service creation
    #    or update to the referenced dependent, or
    # 2. the dependent attribute whose inverse is a logical owner attribute
    #
    # @return [Boolean] whether this property is an uncascaded dependent
    def logical?
      @flags.include?(:logical) or (owner? and inverse_property and inverse_property.logical?)
    end

    # This property is creatable if all of the following conditions hold:
    # * it is {#saved?}
    # * the +:update_only+ flag is not set
    #
    # @return [Boolean] whether this attribute is saved in a create operation
    def creatable?
      saved? and not @flags.include?(:update_only)
    end

    # This property is updatable if all of the following conditions hold:
    # * it is {#saved?}
    # * the +:create_only+ flag is not set
    #
    # @return [Boolean] whether this attribute is saved in a update operation
    def updatable?
      saved? and not @flags.include?(:create_only)
    end

    # Indicates whether this reference propery is saved when its owner is saved.
    #
    # @return [Boolean] whether this property is a physical dependent or the +:cascaded+ flag is set
    def cascaded?
      (dependent? and not logical?) or @flags.include?(:cascaded)
    end
    
    # Returns whether this attribute is #{#cascaded?} and cascades a parent update to a child
    # create. This corresponds to the Hibernate +save-update+ cascade style but not the Hibernate
    # +all+ cascade style.
    #
    # This method returns true if this attribute is cascaded and the +:no_cascade_update_to_create+
    # flag is not set. Set this flag if the Hibernate mapping specifies the +all+ cascade style.
    # Failure to set this flag will result in the caTissue Hibernate error:
    #   Exception: gov.nih.nci.system.applicationservice.ApplicationException:
    #   The given object has a null identifier:
    # followed by the attribute type name.
    #
    # @return [Boolean] whether this property cascades to crate when the owner is updated
    def cascade_update_to_create?
      cascaded? and not @flags.include?(:no_cascade_update_to_create)
    end

    # This property is saved if it is a Java property that is not {#unsaved} or {#proxied_save?}
    # and any of the following conditions hold:
    # * it is {#nondomain?}
    # * it is {#cascaded?}
    # * it is not a {#collection?}
    # * it does not have an inverse
    # * it is a {#unidirectional_java_dependent?}
    #
    # @return [Boolean] whether this attribute is saved in a create or update operation
    def saved?
      @flags.include?(:saved) or
        (java_property? and not (@flags.include?(:unsaved) or transient? or proxied_save?) and
          (nondomain? or cascaded? or not collection? or inverse.nil? or unidirectional_java_dependent?))
    end
    
    # @return [Boolean] whether this attribute is #{#saved?} and does not have the
    #   +:nosync+ flag set
    def sync?
      saved? and not @flags.include?(:nosync)
    end
    
    # @return [Boolean] whether this attribute is not {#saved?}
    def unsaved?
      not saved?
    end
    
    # @return [Boolean] whether this property return {#type} is a Resource class which
    #   implements the saver_proxy method
    def proxied_save?
      domain? and type.method_defined?(:saver_proxy)
    end

    # Returns whether this attribute's referents must exist before an instance of the
    # declarer class can be created. An attribute is a savable prerequisite if it is
    # either:
    # * a {#cascaded?} dependent which does not #{#cascade_update_to_create?}, or
    # * a {#saved?} {#independent?} 1:M or M:N association.
    #
    # @return [Boolean] whether this attribute is a create prerequisite
    def savable_prerequisite?
      return true if cascaded? and @flags.include?(:no_cascade_update_to_create)
      return false unless independent? and saved?
      return true unless collection?
      inv_prop = inverse_property
      inv_prop.nil? or inv_prop.collection?
    end
    
    # @return [Boolean] whether this is a non-collection Java attribute
    def searchable?
      java_property? and not collection?
    end
         
    # @return [Boolean] whether this attribute is set by the server
    def volatile?
      # TODO - subsume by autogenerated?
      to_sym == :identifier or @flags.include?(:volatile)
    end

    private
    
    # @param [Symbol] the flag to set
    # @return [Boolean] whether the flag is supported
    def flag_supported?(flag)
      super or SUPPORTED_FLAGS.include?(flag)
    end

    # @return [Boolean] whether this dependent attribute is fetched. Only physical dependents are fetched by default.
    def fetched_dependent?
      not (logical? or @flags.include?(:unfetched))
    end

    # @return [Boolean] whether this independent attribute is fetched. Only abstract, non-derived independent
    # references are fetched by default.
    def fetched_independent?
      type.abstract? and not (derived? or  @flags.include?(:unfetched))
    end
  end
end
